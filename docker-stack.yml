version: "3.8"
services:
  auth:
    image: daytrader-auth
    environment:
      - USERNAME=${DB_USERNAME}
      - PASSWORD=${PASSWORD}
      - HOST=pgbouncer
      - POSTGRES_PORT=6432
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    networks:
      - day_trader_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  transaction:
    image: daytrader-transaction
    environment:
      - USERNAME=${DB_USERNAME}
      - PASSWORD=${PASSWORD}
      - HOST=pgbouncer
      - POSTGRES_PORT=6432
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    networks:
      - day_trader_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  database:
    image: daytrader-database
    environment:
      - USERNAME=${DB_USERNAME}
      - PASSWORD=${PASSWORD}
      - HOST=${HOST}
      - POSTGRES_PORT=${DOCKER_PORT}
      - DB_NAME=${DB_NAME}
    volumes:
      - ./:/app
    working_dir: /app
    networks:
      - day_trader_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PORT=${DOCKER_PORT}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - day_trader_network
    command: [
      "postgres",
      "-c", "max_connections=1000",
      "-c", "work_mem=16MB",
      "-c", "shared_buffers=2GB",
      "-c", "effective_cache_size=6GB",
      "-c", "maintenance_work_mem=512MB",
      "-c", "random_page_cost=1.1"
    ]
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  matching-engine:
    image: daytrader-matching-engine
    environment:
      - USERNAME=${DB_USERNAME}
      - PASSWORD=${PASSWORD}
      - HOST=pgbouncer
      - POSTGRES_PORT=6432
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    networks:
      - day_trader_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  api-gateway:
    image: daytrader-api-gateway
    container_name: api-gateway
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    networks:
      - day_trader_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: daytrader-frontend
    container_name: frontend
    environment:
      - VITE_API_URL=${VITE_API_URL}
    ports:
      - ${FE_PORT}:${FE_PORT}
    networks:
      - day_trader_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  cache:
    image: redis/redis-stack
    container_name: cache
    ports: # TODO: remove this port
      - ${REDIS_PORT}:${REDIS_PORT}
      - "8200:8200"
    volumes:
      - redis_data:/data
    # Save to disk every 60 seconds if 1 key modified
    #https://stackoverflow.com/questions/75604897/how-to-enable-redis-search-and-redis-json-on-redis-stack-docker-image
    command: ["redis-server", "--protected-mode", "no", "--save", "60", "1", "--loglevel", "warning", "--loadmodule", "/opt/redis-stack/lib/rejson.so"]
    networks:
      - day_trader_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  pgbouncer:
    image: edoburu/pgbouncer
    environment:
      - DATABASE_URL=postgres://${DB_USERNAME}:${PASSWORD}@pgbouncer:6432/${DB_NAME}
    ports:
      - "6432:6432"
    volumes:
      - ./pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./userlist.txt:/etc/pgbouncer/userlist.txt
    networks:
      - day_trader_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

volumes:
  db_data:
  redis_data:

networks:
  day_trader_network:
    driver: overlay
