events { }

http {


    resolver 127.0.0.11 valid=30s;

    lua_package_path "/usr/share/lua/common/?.lua;;";

    lua_shared_dict jwt_cache 10m;

    upstream auth {
        server auth:8000;
    }

    upstream matching-engine {
        server matching-engine:8001;
    }

    upstream transaction {
        server transaction:8002;
    }

#     upstream frontend {
#              server frontend:5173;
#     }

    server {
        listen 3001;

        #location = /verify {
        #    internal;
        #    return 200;
        #}

        # Define the auth subrequest location
        location = /verify {
            internal;
            content_by_lua_block {
                local http = require("resty.http")
                local cache = ngx.shared.jwt_cache

                ngx.log(ngx.ERR, "Starting subrequest script")

                local auth_header = ngx.var.http_Authorization
                if not auth_header then
                    ngx.status = 401
                    ngx.say("Unauthorized")
                    return ngx.exit(401)
                end
                
                ngx.log(ngx.ERR, "We found the auth header")

                local token = auth_header:match("Bearer%s+(.+)")
                if not token then
                    ngx.status = 400
                    ngx.say("Token Required.")
                    return ngx.exit(400)
                end
                
                ngx.log(ngx.ERR, "We have the token: " .. token)

                local cached = cache:get(token)
                if cached then
                    ngx.req.set_header("X-User-Data", cached)
                    return ngx.exit(200)
                else
                    ngx.log(ngx.ERR, "Wasn't cached")

                    local httpc = http.new()
                    local res, err = httpc:request_uri("http://auth:8000/validate_token", {
                        method = "GET",
                        headers = { ["Authorization"] = "Bearer " .. token },
                        ssl_verify = false,
                    })

                    if not res or res.status ~= 200 then
                        if not res then
                            ngx.log(ngx.ERR, "No response: " .. err)
                        else
                            ngx.log(ngx.ERR, "Error response")
                        end
                        ngx.status = 401
                        return ngx.exit(401)
                    end

                    local cjson = require("cjson.safe")
                    local data = cjson.decode(res.body)
                    if not data or not data.username or not data.id then
                        ngx.log(ngx.ERR, "wrong data in token")
                        ngx.status = 401
                        ngx.say("Missing Data in token")
                        return ngx.exit(401)
                    end

                    local userdata = data.username .. "|" .. data.id
                    cache:set(token, userdata, 300)
                    ngx.req.set_header("X-User-Data", userdata)
                    return ngx.exit(200)
                end
            }
        }


        location /authentication/ {
            proxy_pass http://auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /engine/ {
            auth_request /verify;
            proxy_pass http://matching-engine/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /transaction/ {
            auth_request /verify;
            proxy_pass http://transaction/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /setup/ {
            auth_request /verify;
            proxy_pass http://transaction/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

#         location /frontend/ {
#             proxy_pass http://frontend/;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }
    }
}
