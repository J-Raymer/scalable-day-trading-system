
worker_processes auto;

worker_rlimit_nofile 200000;

events {
    worker_connections 16384;
}
http {

    keepalive_timeout 10s;
    keepalive_requests 500;

    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    send_timeout 300s;

    resolver 127.0.0.11 valid=30s;

    lua_package_path "/usr/share/lua/common/?.lua;;";

    lua_shared_dict jwt_cache 10m;
    #
    # upstream auth {
    #     server auth:8000;
    # }
    #
    # upstream matching-engine {
    #     server matching-engine:8001;
    # }
    #
    # upstream transaction {
    #     server transaction:8002;
    # }
    #
    upstream message-broker {
        server message-broker:8009;
    }

    server {
        listen 3001;

        # Define the auth subrequest location
        location = /verify {
            internal;
            content_by_lua_block {
                local http = require("resty.http")
                local cache = ngx.shared.jwt_cache

                local auth_header = ngx.var.http_token
                if not auth_header then
                    ngx.status = 401
                    ngx.say("Unauthorized")
                    return ngx.exit(401)
                end
                
                local cached = cache:get(auth_header)
                if cached then
                    ngx.req.set_header("X-User-Data", cached)
                    return ngx.exit(200)
                else
                    local httpc = http.new()
                    local res, err = httpc:request_uri("http://message-broker:8009/authentication/validate_token", {
                        method = "GET",
                        headers = { ["Authorization"] = "Bearer " .. auth_header },
                        ssl_verify = false,
                    })

                    if not res or res.status ~= 200 then
                        if not res then
                            ngx.log(ngx.ERR, "No response: " .. err)
                        else
                            ngx.log(ngx.ERR, "Error response")
                        end
                        ngx.status = 401
                        return ngx.exit(401)
                    end

                    local cjson = require("cjson.safe")
                    local data = cjson.decode(res.body)
                    if not data or not data.username or not data.id then
                        ngx.log(ngx.ERR, "wrong data in token")
                        ngx.status = 401
                        return ngx.exit(401)
                    end

                    local userdata = data.username .. "|" .. data.id
                    cache:set(auth_header, userdata, 600)
                    ngx.req.set_header("X-User-Data", userdata)
                    return ngx.exit(200)
                end
            }
        }


        location /authentication/ {
            if ($request_method = 'OPTIONS'){
                add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'token, Content-Type' always;
                return 204;
            }
            proxy_pass http://message-broker/authentication/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'token, Content-Type' always;
        }

        location /engine/ {
            if ($request_method = 'OPTIONS'){
                add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always; #This might be very bad security practice
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'token, Content-Type' always;
                return 204;
            }
            auth_request /verify;
            proxy_pass http://message-broker/engine/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always; 
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'token, Content-Type' always;
        }

        location /transaction/ {
            if ($request_method = 'OPTIONS'){
                add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always; #This might be very bad security practice
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'token, Content-Type' always;
                return 204;
            }
            auth_request /verify;
            proxy_pass http://message-broker/transaction/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always; 
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'token, Content-Type' always;
        }

        location /setup/ {
            if ($request_method = 'OPTIONS'){
                add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always; #This might be very bad security practice
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'token, Content-Type' always;
                return 204;
            }
            auth_request /verify;
            proxy_pass http://message-broker/transaction/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            add_header 'Access-Control-Allow-Origin' 'http://localhost:5173' always; 
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'token, Content-Type' always;
        }
    }
}
