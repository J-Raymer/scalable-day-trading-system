version: '3.8'
services:
  auth:
    build:
      context: .
      dockerfile: ./authentication/Dockerfile
    depends_on:
      - cache
      - database
    environment:
      - USERNAME=${DB_USERNAME}
      - PASSWORD=${PASSWORD}
      - HOST=${HOST}
      - POSTGRES_PORT=${DOCKER_PORT}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    networks:
      - day_trader_network

  transaction:
    build:
      context: .
      dockerfile: transaction/Dockerfile
    depends_on:
      - cache
      - database
    environment:
      - USERNAME=${DB_USERNAME}
      - PASSWORD=${PASSWORD}
      - HOST=${HOST}
      - POSTGRES_PORT=${DOCKER_PORT}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    networks:
      - day_trader_network

  database:
    build:
      context: .
      dockerfile: ./database/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      - USERNAME=${DB_USERNAME}
      - PASSWORD=${PASSWORD}
      - HOST=${HOST}
      - POSTGRES_PORT=${DOCKER_PORT}
      - DB_NAME=${DB_NAME}
    volumes:
      - ./:/app
    working_dir: /app
    networks:
      - day_trader_network

  db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PORT=${DOCKER_PORT}
    ports:
      - ${HOST_PORT}:${DOCKER_PORT} # TODO: This should be removed
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - day_trader_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  matching-engine:
    build:
      context: .
      dockerfile: ./matching-engine/Dockerfile
    depends_on:
      - cache
      - database
    environment:
      - USERNAME=${DB_USERNAME}
      - PASSWORD=${PASSWORD}
      - HOST=${HOST}
      - POSTGRES_PORT=${DOCKER_PORT}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    networks:
        - day_trader_network

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    depends_on:
      - auth
      - transaction
      - matching-engine
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    networks:
      - day_trader_network

  frontend:
    build: ./frontend
    container_name: frontend
    depends_on:
      - api-gateway
    environment:
      - VITE_API_URL=${VITE_API_URL}
    ports:
      - ${FE_PORT}:${FE_PORT}
    networks:
      - day_trader_network

  cache:
    image: redis/redis-stack
    container_name: cache
    ports: # TODO: remove this port
      - ${REDIS_PORT}:${REDIS_PORT}
      - "8200:8200"
    volumes:
      - redis_data:/data
    # Save to disk every 60 seconds if 1 key modified
    #https://stackoverflow.com/questions/75604897/how-to-enable-redis-search-and-redis-json-on-redis-stack-docker-image
    command: ["redis-server", "--protected-mode", "no", "--save", "60", "1", "--loglevel", "warning", "--loadmodule", "/opt/redis-stack/lib/rejson.so"]
    networks:
      - day_trader_network


volumes:
  db_data:
  redis_data:


networks:
  day_trader_network:
    driver: bridge
